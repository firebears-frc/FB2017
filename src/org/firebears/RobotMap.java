// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears;

import org.firebears.util.LiquidCrystal;
import org.firebears.util.LiquidCrystal_roboRio;
import org.firebears.util.RobotReport;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import org.firebears.util.CANTalon;

import com.ctre.phoenix.MotorControl.ControlMode;
import com.ctre.phoenix.MotorControl.FeedbackDevice;

import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Relay;

//import edu.wpi.first.wpilibj.Relay;

import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
	public static final boolean DEBUG = true;
	public static final boolean CHASSIS_BRAKE_MODE = true;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon chassisfrontLeft;
    public static CANTalon chassisfrontRight;
    public static CANTalon chassisrearLeft;
    public static CANTalon chassisrearRight;
    public static MecanumDrive chassisrobotDrive;
    public static CANTalon acquisitionacquisitionMotor;
    public static Servo dumperdumperServo;
    public static CANTalon floorfloorLift;
    public static CANTalon climberclimbMotor;
    public static Ultrasonic gearChuteultrasonic;
//    public static DigitalInput breakBeam;
    public static DigitalInput gearSensor;
    
    public static AnalogInput rangeFinder;
    public static AnalogInput rangeFinder2;

	public static LiquidCrystal lcd;
	
	public static CameraServer cameraServer;
	public static UsbCamera usbCamera0;
	public static UsbCamera usbCamera1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static Encoder encoderLeft;
	public static Encoder encoderRight;
	
	public static Relay gearLightRing;
	
	public static AHRS navXBoard;
	
	
	static double m_P = 3.0f;//1.25
	static double m_D = 0;
	static double m_ff = 0;
	static int m_izone = 256;
	static double m_I = 0;
	static double m_rampRate = 10;
	static int m_profile = 0;
	static int m_CountPerRev = 255;//****Magnetic
	
    public static void init(RobotReport report) {

    	
//    	//START CLOSED LOOP PID
//    	
//    	//2 = Front Left
//      //3 = Front Right
//    	//4 = Rear Left
//    	//5 = Rear Right
//    	
    	
		chassisfrontLeft = new CANTalon(2);
		chassisfrontLeft.changeControlMode(ControlMode.Velocity);
		chassisfrontLeft.setFeedbackDevice(FeedbackDevice.QuadEncoder);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisfrontLeft.reverseSensor(false);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisfrontLeft.configNominalOutputVoltage(+0.0d, -0.0d);//Forward/reverse threshold
		chassisfrontLeft.configPeakOutputVoltage(+12.0d, -12.0d);
		chassisfrontLeft.setPID(m_P, m_I, m_D, m_ff, m_izone, m_rampRate, m_profile );
		chassisfrontLeft.configEncoderCodesPerRev(m_CountPerRev);//
		chassisfrontLeft.enableBrakeMode(CHASSIS_BRAKE_MODE);
		chassisfrontLeft.enable();
		chassisfrontLeft.setName("Chassis", "frontLeft");
		LiveWindow.add(chassisfrontLeft);
		report.addCAN(2, "frontLeft", chassisfrontLeft);
		
		chassisfrontRight = new CANTalon(3);
		chassisfrontRight.changeControlMode(ControlMode.Velocity);
		chassisfrontRight.setFeedbackDevice(FeedbackDevice.QuadEncoder);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisfrontRight.reverseSensor(false);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisfrontRight.configNominalOutputVoltage(+0.0d, -0.0d);//Forward/reverse threshold
		chassisfrontRight.configPeakOutputVoltage(+12.0d, -12.0d);
		chassisfrontRight.setPID(m_P, m_I, m_D, m_ff, m_izone, m_rampRate, m_profile );
		chassisfrontRight.configEncoderCodesPerRev(m_CountPerRev);//
		chassisfrontRight.enableBrakeMode(CHASSIS_BRAKE_MODE);
		chassisfrontRight.enable();
		chassisfrontRight.setName("Chassis", "frontRight");
		LiveWindow.add(chassisfrontRight);
		report.addCAN(3, "frontRight", chassisfrontRight);
		
		chassisrearLeft = new CANTalon(4);
		chassisrearLeft.changeControlMode(ControlMode.Velocity);
		chassisrearLeft.setFeedbackDevice(FeedbackDevice.QuadEncoder);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisrearLeft.reverseSensor(false);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisrearLeft.configNominalOutputVoltage(+0.0d, -0.0d);//Forward/reverse threshold
		chassisrearLeft.configPeakOutputVoltage(+12.0d, -12.0d);
		chassisrearLeft.setPID(m_P, m_I, m_D, m_ff, m_izone, m_rampRate, m_profile );
		chassisrearLeft.configEncoderCodesPerRev(m_CountPerRev);//
		chassisrearLeft.enableBrakeMode(CHASSIS_BRAKE_MODE);
		chassisrearLeft.enable();
		chassisrearLeft.setName("Chassis", "rearLeft");
		LiveWindow.add(chassisrearLeft);
		report.addCAN(4, "frontRight", chassisrearLeft);
				
		chassisrearRight = new CANTalon(5);
		chassisrearRight.changeControlMode(ControlMode.Velocity);
		chassisrearRight.setFeedbackDevice(FeedbackDevice.QuadEncoder);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisrearRight.reverseSensor(false);//is this covered above with the sRX_PIDQuadratureEncoder1   ?????
		chassisrearRight.configNominalOutputVoltage(+0.0d, -0.0d);//Forward/reverse threshold
		chassisrearRight.configPeakOutputVoltage(+12.0d, -12.0d);
		chassisrearRight.setPID(m_P, m_I, m_D, m_ff, m_izone, m_rampRate, m_profile );
		chassisrearRight.configEncoderCodesPerRev(m_CountPerRev);//
		chassisrearRight.enableBrakeMode(CHASSIS_BRAKE_MODE);
		chassisrearRight.enable();
		chassisrearRight.setName("Chassis", "rearRight");
		LiveWindow.add(chassisrearRight);
		report.addCAN(5, "rearRight", chassisrearRight);

			
		chassisrobotDrive = new MecanumDrive(chassisfrontLeft, chassisrearLeft,
				chassisfrontRight, chassisrearRight);
		
    	chassisrobotDrive.setSafetyEnabled(true);
        chassisrobotDrive.setExpiration(0.1);
//        chassisrobotDrive.setSensitivity(0.0);
        chassisrobotDrive.setMaxOutput(400);       		
//        chassisrobotDrive.setInvertedMotor(MecanumDrive.MotorType.kFrontLeft, true);
//        chassisrobotDrive.setInvertedMotor(MecanumDrive.MotorType.kRearLeft, true);
		
    	
//		//END CLOSED LOOP PID
        
//		try {
//			cameraServer = CameraServer.getInstance();
//			usbCamera1 = cameraServer.startAutomaticCapture(1);
//			usbCamera0 = cameraServer.startAutomaticCapture(0);
//		}catch(Error e) {
//			System.err.println("Couldn't Open Cameras");
//		}


		
		
		
		//Start Open Loop Drive code
		
		
//		chassisfrontLeft = new CANTalon(2);
//        LiveWindow.addActuator("Chassis", "frontLeft", chassisfrontLeft);
//        
//        chassisfrontRight = new CANTalon(3);
//        LiveWindow.addActuator("Chassis", "frontRight", chassisfrontRight);
//        
//        chassisrearLeft = new CANTalon(4);
//        LiveWindow.addActuator("Chassis", "rearLeft", chassisrearLeft);
//        
//        chassisrearRight = new CANTalon(5);
//        LiveWindow.addActuator("Chassis", "rearRight", chassisrearRight);
//        
//        chassisrobotDrive = new RobotDrive(chassisfrontLeft, chassisrearLeft,
//              chassisfrontRight, chassisrearRight);
//        
//        chassisrobotDrive.setSafetyEnabled(true);
//        chassisrobotDrive.setExpiration(0.1);
//        chassisrobotDrive.setSensitivity(0.5);
//        chassisrobotDrive.setMaxOutput(1.0);
//        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
//        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
//        
        
        //END Open loop code
        
        
        
        
        //Auto generated stuff
            	
        dumperdumperServo = new Servo(0);
        LiveWindow.addActuator("Dumper", "dumperServo", dumperdumperServo);
        report.addPWM(0, "dumperServo", dumperdumperServo);
        
        floorfloorLift = new CANTalon(12);
        floorfloorLift.setName("Floor", "floorLift");
        LiveWindow.add(floorfloorLift);
		report.addCAN(12, "floorLift", floorfloorLift);
        
        climberclimbMotor = new CANTalon(11);
        climberclimbMotor.setName("Climber", "climbMotor");
        LiveWindow.add(climberclimbMotor);
    	report.addCAN(11, "climbMotor", climberclimbMotor);
        
    	acquisitionacquisitionMotor = new CANTalon(13);//Should be 14 for competition
    	acquisitionacquisitionMotor.setName("Acquisition", "acquisitionMotor");
        LiveWindow.add(acquisitionacquisitionMotor);
		report.addCAN(13, "acquisitionMotor", acquisitionacquisitionMotor);
        
        gearSensor = new DigitalInput(1);
        report.addDigitalIO(1, "gearSensor", gearSensor);

        //
        
        rangeFinder = new AnalogInput(0);
        report.addAnalogInput(0, "rangeFinder", rangeFinder);
        
        rangeFinder2 = new AnalogInput(1);
        report.addAnalogInput(1, "rangeFinder2", rangeFinder2);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


        lcd = new LiquidCrystal_roboRio(0x3f); //0x3f
		lcd.begin(20, 4);
		lcd.clear();
		report.addOtherConfig(0x3f, "I2C address of LCD display");
		
//		breakBeam = new DigitalInput(1);

		
       
        gearLightRing = new Relay(0, Relay.Direction.kForward);
        System.out.println("GearLightRing" + (gearLightRing != null));
        report.addRelay(0, "gearLightRing", gearLightRing);
        
		try {
			navXBoard = new AHRS(SPI.Port.kMXP);
		} catch (RuntimeException ex) {
			DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
		}

    }
    
    /**
     * @return current NavXBoard angle wrapped to the range -180 to 180.
     */
    public static double getNavXAngle() {
    	return boundAngle(navXBoard.getAngle());
    }
    
    /**
     * @return the angle wrapped into the range -180 to 180.
     */
    public static double boundAngle(double angle) {
		while (angle > 180) angle -= 360;
		while (angle < -180) angle += 360;
		return angle;
	}
}
