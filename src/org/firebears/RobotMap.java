// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Servo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon chassisfrontLeft;
    public static CANTalon chassisfrontRight;
    public static CANTalon chassisrearLeft;
    public static CANTalon chassisrearRight;
    public static RobotDrive chassisrobotDrive;
    public static CANTalon acquisitionacquisitionMotor;
    public static Servo dumperdumperServo;
    public static CANTalon floorfloorLift;
    public static CANTalon climberclimbMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static AHRS navXBoard;
	
    public static void init() {
		//*/*/*/*/*/Begin Open Loop /*/*/*/*/*/

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisfrontLeft = new CANTalon(2);
        LiveWindow.addActuator("Chassis", "frontLeft", chassisfrontLeft);
        
        chassisfrontRight = new CANTalon(3);
        LiveWindow.addActuator("Chassis", "frontRight", chassisfrontRight);
        
        chassisrearLeft = new CANTalon(4);
        LiveWindow.addActuator("Chassis", "rearLeft", chassisrearLeft);
        
        chassisrearRight = new CANTalon(5);
        LiveWindow.addActuator("Chassis", "rearRight", chassisrearRight);
        
        chassisrobotDrive = new RobotDrive(chassisfrontLeft, chassisrearLeft,
              chassisfrontRight, chassisrearRight);
        
        chassisrobotDrive.setSafetyEnabled(true);
        chassisrobotDrive.setExpiration(0.1);
        chassisrobotDrive.setSensitivity(0.5);
        chassisrobotDrive.setMaxOutput(1.0);

        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        chassisrobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        acquisitionacquisitionMotor = new CANTalon(10);
        LiveWindow.addActuator("Acquisition", "acquisitionMotor", acquisitionacquisitionMotor);
        
        dumperdumperServo = new Servo(11);
        LiveWindow.addActuator("Dumper", "dumperServo", dumperdumperServo);
        
        floorfloorLift = new CANTalon(12);
        LiveWindow.addActuator("Floor", "floorLift", floorfloorLift);
        
        climberclimbMotor = new CANTalon(13);
        LiveWindow.addActuator("Climber", "climbMotor", climberclimbMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
		try {
			navXBoard = new AHRS(SPI.Port.kMXP);
		} catch (RuntimeException ex) {
			DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
		}

    }
}
