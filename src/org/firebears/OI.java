// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears;

import org.firebears.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.firebears.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
 
    public JoystickButton acquisitionToggle;
    public JoystickButton floorGoUp;
    public JoystickButton floorGoDown;
    public Joystick joystick1;
    public Joystick joystick2;
	public DigitalButton autoSwichButton;
    
	public OI() {

		floorGoUp = new JoystickButton(joystick1, 11);
		
		floorGoDown = new JoystickButton(joystick1, 12);
		
        joystick2 = new Joystick(1);
        
        joystick1 = new Joystick(0);
        
        acquisitionToggle = new JoystickButton(joystick1, 2);
        acquisitionToggle.whenPressed(new AcquireCommand());
        
        autoSwichButton = new DigitalButton(0);
		autoSwichButton.whenActive(new SelectAuto());


        // SmartDashboard Buttons

		if (RobotMap.DEBUG) {
			SmartDashboard.putData("Turn:", new AutoRotate((float) 90.0));
			SmartDashboard.putData("Reset NavX:", new NavXReset());
			SmartDashboard.putData("Original VisionTurn:", new VisionRotate(false));
			SmartDashboard.putData("Bar Ratio VisionTurn:", new VisionRotate(true));
			SmartDashboard.putData("StartRecording", new StartMotionRecordCommand());
			SmartDashboard.putData("StopRecording", new StopMotionRecordCommand());
			SmartDashboard.putData("PlayRecording", new PlayRecordingCommand());
			SmartDashboard.putData("Vision Drive:", new VisionDrive());
	        SmartDashboard.putData("Strafe (hopefully) Straight:", new StrafeStraightCommand());
	        SmartDashboard.putData("Angle Adjust:", new VisionAngleAdjustCommand());
	        SmartDashboard.putData("Vision Group Command (3 step):", new VisionCommandGroup());
	        SmartDashboard.putData("Vision Hybrid Command", new VisionHybridCommand());
	        SmartDashboard.putData("Drive Forward:", new MoveForwardInches(10.0));
		}
    }

      public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }

}

