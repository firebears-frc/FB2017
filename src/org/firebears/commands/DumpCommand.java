// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.firebears.Robot;
import org.firebears.RobotMap;

/**
 *
 */
public class DumpCommand extends Command {

	
	double speed;
	public DumpCommand(double s) {
		requires(Robot.hopper);
		if (s < 0.0){
			speed = Math.abs(s);
		} else {
			speed = s;
		}

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.hopper.raiseDumperServo();
		
		
		
//		switch(Robot.hopper.floorpostion){
//		case(1):
//			Robot.hopper.lowerDumperServo();
//
////			Robot.hopper.goDown();
//			Robot.hopper.floorpostion = 2;
////			SmartDashboard.putString("?", "lower");
//			break;
//		case(2):
//			Robot.hopper.raiseDumperServo();
////			Robot.hopper.goUp();
//			Robot.hopper.floorpostion = 1;
////			SmartDashboard.putString("?", "upper");
//			break;
//		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		
		Robot.hopper.goDown(speed);
//		Robot.oi.joystick1.get
		
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.hopper.stopHopper();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
